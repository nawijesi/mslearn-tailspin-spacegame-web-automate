--- 
  trigger: 
    - "*"
  variables: 
    buildConfiguration: Release
    stages: 
      - 
        displayName: "Build the web application"
        jobs: 
          - 
            displayName: "Build job"
            job: Build
            pool: 
              demands: 
                - npm
              vmImage: ubuntu-18.04
            steps: 
              - 
                displayName: "Use .NET Core SDK $(dotnetSdkVersion)"
                inputs: 
                  version: $(dotnetSdkVersion)
                task: UseDotNet@2
              - 
                displayName: "Run npm install"
                inputs: 
                  verbose: false
                task: Npm@1
              - 
                displayName: "Compile Sass assets"
                script: "./node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)"
              - 
                displayName: "Run gulp tasks"
                task: gulp@1
              - 
                displayName: "Write build info"
                script: "echo \"$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)\" > buildinfo.txt"
                workingDirectory: $(wwwrootDir)
              - 
                displayName: "Restore project dependencies"
                inputs: 
                  command: restore
                  projects: "**/*.csproj"
                task: DotNetCoreCLI@2
              - 
                displayName: "Build the project - $(buildConfiguration)"
                inputs: 
                  arguments: "--no-restore --configuration $(buildConfiguration)"
                  command: build
                  projects: "**/*.csproj"
                task: DotNetCoreCLI@2
              - 
                displayName: "Publish the project - $(buildConfiguration)"
                inputs: 
                  arguments: "--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)"
                  command: publish
                  projects: "**/*.csproj"
                  publishWebProjects: false
                  zipAfterPublish: true
                task: DotNetCoreCLI@2
              - 
                artifact: drop
                publish: $(Build.ArtifactStagingDirectory)
            variables: 
              dotnetSdkVersion: "3.1.300"
              wwwrootDir: Tailspin.SpaceGame.Web/wwwroot
          - 
            job: BuildDacpac
            pool: 
              vmImage: windows-2019
            steps: 
              - 
                displayName: "Restore project dependencies"
                inputs: 
                  command: restore
                  projects: "**/*.csproj"
                task: DotNetCoreCLI@2
              - 
                displayName: "Build the database project"
                inputs: 
                  project: "**/*.sqlproj"
                task: VSBuild@1
              - 
                displayName: "Copy dacpac file to staging directory"
                inputs: 
                  contents: "Tailspin.SpaceGame.Database/bin/**/*.dacpac\n"
                  targetFolder: $(Build.StagingDirectory)
                task: CopyFiles@2
              - 
                condition: succeededOrFailed()
                displayName: "Publish Artifact"
                inputs: 
                  artifactName: dropDacpac
                  pathToPublish: $(Build.ArtifactStagingDirectory)
                task: PublishBuildArtifacts@1
        stage: Build
      - 
        displayName: "Provision the database and web application"
        jobs: 
          - 
            displayName: "Deploy infrastructure job"
            job: DeployInfrastructure
            pool: 
              vmImage: ubuntu-18.04
            steps: 
              - 
                inputs: 
                  ConnectedServiceName: "Resource Manager - Tailspin - Space Game"
                  action: "Create Or Update Resource Group"
                  csmFile: template.json
                  csmParametersFile: deploymentParameters.json
                  deploymentMode: Incremental
                  deploymentOutputs: ResourceGroupDeploymentOutputs
                  deploymentScope: "Resource Group"
                  location: $(location)
                  resourceGroupName: tailspin-spacegame-web-rg
                  subscriptionName: $(subscription)
                  templateLocation: "Linked artifact"
                task: AzureResourceManagerTemplateDeployment@3
            variables: 
              - 
                group: Release
        stage: Provision
      - 
        dependsOn: Provision
        displayName: "Script database schema changes"
        jobs: 
          - 
            deployment: DBAVerificationScript
            environment: dbaverificationscript
            pool: 
              vmImage: windows-2019
            strategy: 
              runOnce: 
                deploy: 
                  steps: 
                    - 
                      inputs: 
                        azureSubscription: "Resource Manager - Tailspin - Space Game"
                        keyVaultName: $(keyVaultName)
                        secretsFilter: "*"
                      task: AzureKeyVault@1
                    - 
                      artifact: dropDacpac
                      download: current
                      patterns: "**/*"
                    - 
                      displayName: "Generate schema change script"
                      inputs: 
                        authenticationType: server
                        azureSubscription: "Resource Manager - Tailspin - Space Game"
                        dacpacFile: $(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac
                        databaseName: tailspindatabase
                        deployType: DacpacTask
                        deploymentAction: Script
                        ipDetectionMethod: AutoDetect
                        serverName: tailspin-space-game-sql-dev-$(uniqueSuffix).database.windows.net
                        sqlPassword: $(adminPassword)
                        sqlUsername: azuresql
                      task: SqlAzureDacpacDeployment@1
                    - 
                      displayName: "Show Auto Generated SQL Script"
                      inputs: 
                        script: |
                            Write-Host "Auto Generated SQL Update Script:"
                            Get-Content d:\a\1\s\GeneratedOutputFiles\tailspindatabase_Script.sql | foreach {Write-Output $_}
                        targetType: inline
                      task: PowerShell@2
                    - 
                      displayName: "Show change script and check for schema changes"
                      inputs: 
                        script: |
                            # Print the schema change script
                            Write-Host "Auto Generated SQL Update Script:"
                            Get-Content d:\a\1\s\GeneratedOutputFiles\tailspindatabase_Script.sql | foreach {Write-Output $_}
                            
                            # Check for schema changes
                            $file = Get-Content "d:\a\1\s\GeneratedOutputFiles\tailspindatabase_Script.sql"
                            $containsWord = $file | %{$_ -match "CREATE" -or $_ -match "ALTER" -or $_ -match "DROP"}
                            if ($containsWord -contains $true) {
                              Install-Module VSTeam -Scope CurrentUser -Force
                              Set-VSTeamAccount â€“Account $(Acct) -PersonalAccessToken $(PAT)
                              $methodParameters = @{
                                ProjectName = "$(System.TeamProject)"
                                Name = "Release"}
                              $vg = Get-VSTeamVariableGroup @methodParameters
                              $vars = @{}
                              $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                              $varName = "schemaChanged"
                              $vars.$varName= @{}
                              $vars.$varName.value = "True"
                              $vars.$varName.isSecret = $false
                              $methodParameters = @{
                                id = $vg.id
                                ProjectName = "$(System.TeamProject)"
                                Name = "Release"
                                Description = ""
                                Type = "Vsts"
                                Variables = $vars}
                              Update-VSTeamVariableGroup @methodParameters}
                        targetType: inline
                      task: PowerShell@2
            variables: 
              - 
                group: Release
        stage: DBAVerificationScript
      - 
        condition: "and(succeeded('DBAVerificationScript'), eq(variables['schemaChanged'], True))"
        dependsOn: DBAVerificationScript
        displayName: "Apply database schema changes"
        jobs: 
          - 
            deployment: DBAVerificationApply
            environment: dbaverificationapply
            pool: 
              vmImage: windows-2019
            strategy: 
              runOnce: 
                deploy: 
                  steps: 
                    - 
                      inputs: 
                        azureSubscription: "Resource Manager - Tailspin - Space Game"
                        keyVaultName: $(keyVaultName)
                        secretsFilter: "*"
                      task: AzureKeyVault@1
                    - 
                      artifact: dropDacpac
                      download: current
                      patterns: "**/*"
                    - 
                      displayName: "Deploy SQL schema"
                      inputs: 
                        authenticationType: server
                        azureSubscription: "Resource Manager - Tailspin - Space Game"
                        dacpacFile: $(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac
                        databaseName: tailspindatabase
                        deployType: DacpacTask
                        deploymentAction: Publish
                        ipDetectionMethod: AutoDetect
                        serverName: tailspin-space-game-sql-dev-$(uniqueSuffix).database.windows.net
                        sqlPassword: $(adminPassword)
                        sqlUsername: azuresql
                      task: SqlAzureDacpacDeployment@1
                    - 
                      displayName: "Remove \"schemaChanged\" pipeline variable"
                      inputs: 
                        script: |
                            Install-Module VSTeam -Scope CurrentUser -Force
                            Set-VSTeamAccount â€“Account $(Acct) -PersonalAccessToken $(PAT)
                            $methodParameters = @{
                              ProjectName = "$(System.TeamProject)"
                              Name = "Release"}
                            $vg = Get-VSTeamVariableGroup  @methodParameters 
                            $vars = @{}
                            $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                            $vars.Remove("schemaChanged")
                            $methodParameters = @{
                              id = $vg.id
                              ProjectName = "$(System.TeamProject)"
                              Name = "Release"
                              Description = ""
                              Type = "Vsts"
                              Variables = $vars}
                            Update-VSTeamVariableGroup @methodParameters
                        targetType: inline
                      task: PowerShell@2
            variables: 
              - 
                group: Release
        stage: DBAVerificationApply
        variables: 
          - 
            group: Release
      - 
        condition: |
            and
            (
              succeeded('DBAVerificationScript'),
              in(dependencies.DBAVerificationApply.result, 'Succeeded', 'Skipped')
            )
        dependsOn: 
          - DBAVerificationScript
          - DBAVerificationApply
        displayName: "Deploy to the dev environment"
        jobs: 
          - 
            deployment: Deploy
            environment: dev
            pool: 
              vmImage: ubuntu-18.04
            strategy: 
              runOnce: 
                deploy: 
                  steps: 
                    - 
                      inputs: 
                        azureSubscription: "Resource Manager - Tailspin - Space Game"
                        keyVaultName: $(keyVaultName)
                        secretsFilter: "*"
                      task: AzureKeyVault@1
                    - 
                      artifact: drop
                      download: current
                    - 
                      displayName: "Azure App Service Deploy: website"
                      inputs: 
                        appName: tailspin-space-game-web-dev-$(uniqueSuffix)
                        azureSubscription: "Resource Manager - Tailspin - Space Game"
                        package: $(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip
                      task: AzureWebApp@1
                    - 
                      displayName: "Azure App Service Settings"
                      inputs: 
                        appName: tailspin-space-game-web-dev-$(uniqueSuffix)
                        azureSubscription: "Resource Manager - Tailspin - Space Game"
                        connectionStrings: "[{ \"name\": \"DefaultConnection\",\"value\": \"$(connectionString)\",\"type\": \"SQLAzure\",\"slotSetting\": false }]"
                      task: AzureAppServiceSettings@1
            variables: 
              - 
                group: Release
        stage: Dev
  